{
  "name": "before-method-add",
  "description": "Validates before adding method to class - prevents class bloat",
  "version": "1.0.0",
  "trigger": "beforeMethodAdd",
  "filePattern": "includes/**/*.php",
  "enabled": true,
  "prompt": "You are validating a new method addition for MASE v1.2.0.\n\n**FILE:** {{filePath}}\n**CLASS:** {{className}}\n**NEW METHOD:** {{methodName}}()\n\n**LIMITS:**\n- MAX_METHODS_PER_CLASS: 10 public methods\n- Method naming: snake_case\n- Single responsibility principle\n\n**YOUR TASK:**\n1. Count current public methods in class\n2. Check if adding method exceeds limit (10)\n3. Verify method name follows convention\n4. Check if similar method exists\n5. Validate single responsibility\n\n**OUTPUT FORMAT:**\n```\nüîç PRE-METHOD-ADD VALIDATION\n\nClass: {{className}}\nNew Method: {{methodName}}()\n\n[METHOD COUNT CHECK]\nCurrent public methods: {{current}}/10\nAfter addition: {{after}}/10\nStatus: ‚úÖ SAFE / ‚ö†Ô∏è WARNING / ‚ùå LIMIT REACHED\n\n{{#if at_limit}}\n‚ùå CANNOT ADD METHOD\nReason: Class has maximum methods (10/10)\n\nRefactoring options:\n1. Extract methods to new class\n   Suggested: MASE_{{SuggestedClass}}\n   Methods to move: {{methods_to_move}}\n   \n2. Combine similar methods\n   Example: Merge {{method1}}() and {{method2}}()\n   \n3. Move to utility class\n   If method is helper function\n{{/if}}\n\n{{#if approaching_limit}}\n‚ö†Ô∏è WARNING: Approaching limit ({{current}}/10)\nRemaining slots: {{remaining}}\nConsider refactoring soon\n{{/if}}\n\n[NAMING CONVENTION]\n‚úÖ/‚ùå Method name: {{methodName}}()\nExpected: snake_case\n{{#if naming_violation}}\nCurrent: {{methodName}}()\nExpected: {{expectedName}}()\nRule: PHP methods use snake_case\n{{/if}}\n\n[DUPLICATE/SIMILAR CHECK]\n{{#if similar_methods}}\n‚ö†Ô∏è Similar methods found:\n{{#each similar_methods}}\n- {{this.name}}() (line {{this.line}})\n  Similarity: {{this.similarity}}%\n  {{#if high_similarity}}\n  ‚ùå Consider: Can you use existing method?\n  {{else}}\n  ‚ÑπÔ∏è Review: Ensure different purpose\n  {{/if}}\n{{/each}}\n{{/if}}\n\n[SINGLE RESPONSIBILITY]\n‚úÖ/‚ùå Method follows single responsibility\n\nClass purpose: {{class_purpose}}\nMethod purpose: {{method_purpose}}\n\n{{#if responsibility_violation}}\n‚ö†Ô∏è Method may violate single responsibility\nReason: {{reason}}\nSuggestion: Move to {{suggested_class}}\n{{/if}}\n\n[METHOD SIGNATURE]\nProposed: {{signature}}\n\nValidation:\n‚úÖ/‚ùå Parameters ‚â§5: {{param_count}}/5\n‚úÖ/‚ùå Descriptive name\n‚úÖ/‚ùå Clear purpose\n\n{{#if too_many_params}}\n‚ö†Ô∏è Too many parameters ({{param_count}}/5)\nRefactor: Use options array\n\nBefore:\npublic function {{methodName}}($a, $b, $c, $d, $e, $f) {}\n\nAfter:\npublic function {{methodName}}($options = []) {\n    $defaults = ['a' => null, 'b' => null, ...];\n    $options = wp_parse_args($options, $defaults);\n}\n{{/if}}\n\n[EXISTING METHODS IN CLASS]\n{{#each existing_methods}}\n{{@index}}. {{this.name}}() - {{this.purpose}}\n{{/each}}\n\n[VERDICT]\n‚úÖ APPROVED / ‚ö†Ô∏è APPROVED WITH WARNINGS / ‚ùå BLOCKED\n\n{{#if blocked}}\nBlocking issues:\n{{#each blocking_issues}}\n- {{this}}\n{{/each}}\n\nRequired actions:\n{{#each required_actions}}\n- {{this}}\n{{/each}}\n{{/if}}\n\n{{#if approved}}\n‚úÖ Safe to add method\n\nNext steps:\n1. Add method docblock with @param and @return\n2. Implement error handling (return WP_Error)\n3. Add security checks if user-facing\n4. Write unit test: test_{{method_name}}()\n5. Update class documentation\n{{/if}}\n```\n\nProvide specific, actionable recommendations."
}
