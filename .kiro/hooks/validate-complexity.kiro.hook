{
  "name": "validate-complexity",
  "description": "Validates code complexity to prevent hard-to-test code",
  "version": "1.0.0",
  "trigger": "onFileSave",
  "filePattern": "**/*.{php,js}",
  "excludePattern": "**/vendor/**,**/node_modules/**,**/tests/**",
  "enabled": true,
  "prompt": "You are validating code complexity for MASE v1.2.0.\n\n**FILE:** {{filePath}}\n\n**COMPLEXITY LIMITS:**\n- Cyclomatic complexity: ≤10\n- Nesting depth: ≤4 levels\n- Parameters: ≤5 per method/function\n- Single responsibility maintained\n\n**YOUR TASK:**\n1. Analyze each method/function\n2. Calculate cyclomatic complexity\n3. Check nesting depth\n4. Count parameters\n5. Assess single responsibility\n6. Provide refactoring suggestions\n\n**CYCLOMATIC COMPLEXITY:**\nCount decision points:\n- if, else, elseif: +1 each\n- for, foreach, while: +1 each\n- case in switch: +1 each\n- &&, ||: +1 each\n- ?: ternary: +1\n- catch: +1\n\n**OUTPUT FORMAT:**\n```\n✅ PASS / ⚠️ WARNING / ❌ FAIL: Complexity Validation\n\nFile: {{fileName}}\n\n[METHODS ANALYZED]\n\n1. Method: {{method1}}()\n   Line: {{line}}\n   \n   Complexity Metrics:\n   - Cyclomatic complexity: {{complexity}}/10\n   - Nesting depth: {{nesting}}/4\n   - Parameters: {{params}}/5\n   - Lines: {{lines}}\n   \n   Status: ✅ PASS / ⚠️ WARNING / ❌ FAIL\n   \n   {{#if fail}}\n   Issues:\n   - Complexity: {{complexity}} (max: 10)\n   - Nesting: {{nesting}} levels (max: 4)\n   - Parameters: {{params}} (max: 5)\n   \n   Refactoring suggestions:\n   1. Extract validation logic to validate_{{entity}}()\n      Lines {{start}}-{{end}} → New method\n      Estimated complexity reduction: {{reduction}}\n   \n   2. Extract nested loop to process_{{items}}()\n      Lines {{start}}-{{end}} → New method\n      Reduces nesting from {{current}} to {{target}}\n   \n   3. Combine parameters into options array\n      Current: method($a, $b, $c, $d, $e, $f)\n      Refactored: method($options)\n      Where $options = ['a' => $a, 'b' => $b, ...]\n   {{/if}}\n\n2. Method: {{method2}}()\n   [Similar analysis]\n\n[SUMMARY]\nTotal methods: {{total}}\n✅ Simple (complexity ≤5): {{simple}}\n⚠️ Moderate (complexity 6-10): {{moderate}}\n❌ Complex (complexity >10): {{complex}}\n\n[REFACTORING PRIORITY]\nHigh Priority (complexity >15):\n1. {{method}} (complexity: {{value}})\n   Impact: Hard to test, maintain\n   Effort: {{hours}} hours\n\nMedium Priority (complexity 11-15):\n1. {{method}} (complexity: {{value}})\n   Impact: Moderate difficulty\n   Effort: {{hours}} hours\n\n[RECOMMENDED ACTIONS]\n{{#if has_complex}}\n❌ REFACTORING REQUIRED\n\nBefore commit:\n1. Refactor {{method1}}() - reduce complexity to ≤10\n2. Extract nested logic from {{method2}}()\n3. Simplify parameter lists\n\nEstimated time: {{total_hours}} hours\n{{/if}}\n\n{{#if all_pass}}\n✅ ALL METHODS WITHIN LIMITS\n\nOptional improvements:\n- Consider extracting {{method}}() for better readability\n- Add helper methods for repeated logic\n{{/if}}\n\n[CODE EXAMPLES]\n\n❌ BEFORE (Complexity: {{before_complexity}}):\n```php\npublic function apply_palette($id, $merge, $backup, $validate, $cache) {\n    if ($validate) {\n        if (!$this->is_valid($id)) {\n            if ($backup) {\n                $this->create_backup();\n            }\n            return false;\n        }\n    }\n    // More nested logic...\n}\n```\n\n✅ AFTER (Complexity: {{after_complexity}}):\n```php\npublic function apply_palette($id, $options = []) {\n    $options = wp_parse_args($options, [\n        'merge' => false,\n        'backup' => true,\n        'validate' => true,\n        'cache' => true\n    ]);\n    \n    if ($options['validate'] && !$this->validate_palette($id)) {\n        return new WP_Error('invalid_palette');\n    }\n    \n    if ($options['backup']) {\n        $this->create_backup();\n    }\n    \n    return $this->do_apply_palette($id, $options);\n}\n\nprivate function validate_palette($id) {\n    return $this->is_valid($id);\n}\n\nprivate function do_apply_palette($id, $options) {\n    // Actual application logic\n}\n```\n```\n\nProvide specific, actionable refactoring suggestions with code examples."
}
