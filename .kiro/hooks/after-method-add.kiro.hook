{
  "name": "after-method-add",
  "description": "Validates after method addition - ensures proper integration",
  "version": "1.0.0",
  "trigger": "afterMethodAdd",
  "filePattern": "includes/**/*.php",
  "enabled": true,
  "prompt": "You are validating a newly added method for MASE v1.2.0.\n\n**FILE:** {{filePath}}\n**CLASS:** {{className}}\n**METHOD:** {{methodName}}()\n**LINE:** {{lineNumber}}\n\n**INTEGRATION CHECKLIST:**\n\n**YOUR TASK:**\nVerify the new method is properly documented, tested, and integrated.\n\n**OUTPUT FORMAT:**\n```\n✅ POST-METHOD-ADD VALIDATION\n\nClass: {{className}}\nMethod: {{methodName}}()\n\n[METHOD DOCBLOCK]\n✅/❌ Docblock present\n✅/❌ @param tags for all parameters\n✅/❌ @return tag\n✅/❌ @since tag\n✅/❌ Description clear\n\n{{#if incomplete_docblock}}\n❌ Incomplete docblock\n\nRequired format:\n```php\n/**\n * Brief description of what method does\n * \n * Detailed description if needed.\n * \n * @since 1.2.0\n * @param string $param1 Description of param1\n * @param array  $param2 Description of param2\n * @return bool|WP_Error True on success, WP_Error on failure\n */\npublic function {{methodName}}($param1, $param2) {\n```\n{{/if}}\n\n[METHOD SIGNATURE]\nSignature: {{signature}}\n\n✅/❌ Parameters documented\n✅/❌ Return type clear\n✅/❌ Naming follows convention (snake_case)\n✅/❌ Parameters ≤5\n\n{{#if issues}}\nIssues found:\n{{#each issues}}\n- {{this}}\n{{/each}}\n{{/if}}\n\n[ERROR HANDLING]\n✅/❌ Returns WP_Error on failure\n✅/❌ Validates input parameters\n✅/❌ Handles edge cases\n\n{{#if no_error_handling}}\n⚠️ No error handling detected\n\nAdd error handling:\n```php\npublic function {{methodName}}($param) {\n    // Validate input\n    if (empty($param)) {\n        return new WP_Error(\n            'invalid_param',\n            __('Parameter cannot be empty', 'modern-admin-styler')\n        );\n    }\n    \n    // Your logic\n    $result = $this->do_something($param);\n    \n    // Check result\n    if (is_wp_error($result)) {\n        return $result;\n    }\n    \n    return true;\n}\n```\n{{/if}}\n\n[SECURITY CHECKS]\n{{#if is_public}}\n✅/❌ Input sanitization\n✅/❌ Output escaping\n✅/❌ Capability checks (if needed)\n✅/❌ Nonce verification (if AJAX)\n{{/if}}\n\n{{#if security_issues}}\n❌ Security issues found:\n{{#each security_issues}}\n{{@index}}. {{this.issue}}\n   Line: {{this.line}}\n   Fix: {{this.fix}}\n{{/each}}\n{{/if}}\n\n[METHOD COMPLEXITY]\nLines: {{line_count}}\nCyclomatic complexity: {{complexity}}\nNesting depth: {{nesting}}\n\n✅/❌ Lines ≤50: {{line_count}}/50\n✅/❌ Complexity ≤10: {{complexity}}/10\n✅/❌ Nesting ≤4: {{nesting}}/4\n\n{{#if too_complex}}\n⚠️ Method too complex\nRefactor suggestions:\n{{#each refactor_suggestions}}\n- {{this}}\n{{/each}}\n{{/if}}\n\n[UNIT TEST]\n✅/❌ Test exists\n✅/❌ Test covers main functionality\n✅/❌ Test covers edge cases\n✅/❌ Test covers error cases\n\n{{#if no_test}}\n❌ No unit test found\n\nCreate test in: tests/unit/test-{{class-name}}.php\n\nTest template:\n```php\npublic function test_{{method_name}}_success() {\n    // Arrange\n    $instance = new {{ClassName}}();\n    $param = 'test_value';\n    \n    // Act\n    $result = $instance->{{methodName}}($param);\n    \n    // Assert\n    $this->assertTrue($result);\n    $this->assertNotWPError($result);\n}\n\npublic function test_{{method_name}}_with_empty_param() {\n    // Arrange\n    $instance = new {{ClassName}}();\n    \n    // Act\n    $result = $instance->{{methodName}}('');\n    \n    // Assert\n    $this->assertWPError($result);\n    $this->assertEquals('invalid_param', $result->get_error_code());\n}\n```\n{{/if}}\n\n[METHOD USAGE]\n✅/❌ Called from appropriate places\n✅/❌ Not orphaned (unused)\n\n{{#if usage_found}}\nMethod called from:\n{{#each callers}}\n- {{this.file}}:{{this.line}} in {{this.method}}()\n{{/each}}\n{{/if}}\n\n{{#if orphaned}}\n⚠️ Method not called anywhere\nConsider:\n- Is this a public API method?\n- Should it be called from init()?\n- Is it for future use?\n{{/if}}\n\n[DEPENDENCIES]\n{{#if has_dependencies}}\nMethod depends on:\n{{#each dependencies}}\n- {{this.class}}::{{this.method}}()\n{{/each}}\n\n✅/❌ All dependencies available\n✅/❌ Dependencies properly injected\n{{/if}}\n\n[PERFORMANCE]\n{{#if has_database_query}}\n✅/❌ Query optimized\n✅/❌ Results cached\n✅/❌ No N+1 problem\n{{/if}}\n\n{{#if performance_concerns}}\n⚠️ Performance concerns:\n{{#each performance_concerns}}\n- {{this.concern}}\n  Impact: {{this.impact}}\n  Fix: {{this.fix}}\n{{/each}}\n{{/if}}\n\n[SUMMARY]\nTotal checks: {{total_checks}}\n✅ Passed: {{passed}}\n❌ Failed: {{failed}}\n⚠️ Warnings: {{warnings}}\n\n[REQUIRED ACTIONS]\n{{#if has_failures}}\nBefore committing:\n{{#each required_actions}}\n{{@index}}. {{this}}\n{{/each}}\n\nEstimated time: {{estimated_time}} minutes\n{{/if}}\n\n[OPTIONAL IMPROVEMENTS]\n{{#each improvements}}\n- {{this}}\n{{/each}}\n\n[VERDICT]\n{{#if all_pass}}\n✅ METHOD COMPLETE AND INTEGRATED\n{{else if has_warnings}}\n⚠️ METHOD USABLE BUT NEEDS IMPROVEMENTS\n{{else}}\n❌ METHOD INCOMPLETE - FIX REQUIRED ISSUES\n{{/if}}\n```\n\nProvide specific, actionable feedback for each issue."
}
